name: Build and Push Images

on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      context:
        required: true
        type: string
      dockerfile-path:
        required: true
        type: string
      platforms:
        required: true
        type: string
      build-base-images:
        required: true
        type: boolean

jobs:
  build-base-images:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Export version variable
        run: |
          IMAGE_ID=sivanantha/${{ inputs.image-name }}
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          
          # Strip "v" prefix from tag name
          # [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          VERSION=latest
          
          echo VERSION=$VERSION >> $GITHUB_ENV
          echo IMAGE_ID=$IMAGE_ID >> $GITHUB_ENV

      - name: List builders
        run: |
          docker builder ls

      - name: Build kserve build base image
        #        if: ${{ inputs.build-base-images == true }}
        #        uses: docker/build-push-action@v4
        #        with:
        #          platforms: ${{ inputs.platforms }}
        #          context: python
        #          file: python/build_base_image.Dockerfile
        #          push: false
        #          tags: build-base-image:latest
        #          outputs: type=oci,dest=build-base-image-oci
        run: |
          docker buildx build --file python/build_base_image.Dockerfile --platform ${{ inputs.platforms }} --tag build-base-image:latest -o type=oci,dest=build-base-image-oci python

      - name: Build kserve prod base image
        if: ${{ inputs.build-base-images == true }}
        #        uses: docker/build-push-action@v4
        #        with:
        #          platforms: ${{ inputs.platforms }}
        #          context: python
        #          file: python/prod_base_image.Dockerfile
        #          push: false
        #          tags: prod-base-image:latest
        #          outputs: type=oci,dest=prod-base-image-oci
        run: |
          docker buildx build --file python/prod_base_image.Dockerfile --platform ${{ inputs.platforms }} --tag prod-base-image:latest -o type=oci,dest=prod-base-image-oci python

      - name: docker images
        run: |
          ls
          docker image import build-base-image-oci build-base-image:latest
          docker image import prod-base-image-oci prod-base-image:latest
          docker image inspect build-base-image:latest
          docker search build-base-image:latest
          docker image ls

      - name: Upload build base image
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: "build-base-image:latest"

      - name: Upload prod base image
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: "prod-base-image:latest"

  build-and-push:
    runs-on: ubuntu-latest
    needs: build-base-images

    steps:
      - uses: actions/checkout@v3

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Export version variable
        run: |
          IMAGE_ID=sivanantha/${{ inputs.image-name }}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          # [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          VERSION=latest

          echo VERSION=$VERSION >> $GITHUB_ENV
          echo IMAGE_ID=$IMAGE_ID >> $GITHUB_ENV

      - name: List builders
        run: |
          docker builder ls

#      - name: Build kserve build base image
#        if: ${{ inputs.build-base-images == true }}
#        uses: docker/build-push-action@v4
#        with:
#          platforms: ${{ inputs.platforms }}
#          context: python
#          file: python/build_base_image.Dockerfile
#          push: false
#          tags: build-base-image:latest
#          outputs: type=oci,dest=build-base-image-oci
#        run: |
#          docker buildx build --file python/build_base_image.Dockerfile --platform ${{ inputs.platforms }} --tag build-base-image:latest -o type=oci,dest=build-base-image-oci python
#
#      - name: Build kserve prod base image
#        if: ${{ inputs.build-base-images == true }}
#        uses: docker/build-push-action@v4
#        with:
#          platforms: ${{ inputs.platforms }}
#          context: python
#          file: python/prod_base_image.Dockerfile
#          push: false
#          tags: prod-base-image:latest
#          outputs: type=oci,dest=prod-base-image-oci
#        run: |
#          docker buildx build --file python/prod_base_image.Dockerfile --platform ${{ inputs.platforms }} --tag prod-base-image:latest -o type=oci,dest=prod-base-image-oci python

      - name: Download build base image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "build-base-image:latest"

      - name: Download prod base image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "prod-base-image:latest"

      - name: docker images
        run: |
          ls
          #docker image import build-base-image-oci build-base-image:latest
          #docker image import prod-base-image-oci prod-base-image:latest
          docker image inspect build-base-image:latest
          docker search build-base-image:latest
          docker image ls

      - name: Build and push
#        uses: docker/build-push-action@v4
#        with:
#          platforms: ${{ inputs.platforms }}
#          context: ${{ inputs.context }}
#          file: ${{ inputs.Dockerfile-path }}
#          push: true
#          tags: ${{ env.IMAGE_ID }}:${{ env.VERSION }}
        run: |
          docker buildx build --file ${{ inputs.Dockerfile-path }} --platform ${{ inputs.platforms }} --tag ${{ env.IMAGE_ID }}:${{ env.VERSION }} ${{ inputs.context }}
          docker push ${{ env.IMAGE_ID }}:${{ env.VERSION }}

